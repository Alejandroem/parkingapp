class Autogenerated {
  int? nhits;
  Parameters? parameters;
  List<Records>? records;
  List<FacetGroups>? facetGroups;

  Autogenerated({this.nhits, this.parameters, this.records, this.facetGroups});

  Autogenerated.fromJson(Map<String, dynamic> json) {
    nhits = json['nhits'];
    parameters = json['parameters'] != null
        ? new Parameters.fromJson(json['parameters'])
        : null;
    if (json['records'] != null) {
      records = <Records>[];
      json['records'].forEach((v) {
        records!.add(new Records.fromJson(v));
      });
    }
    if (json['facet_groups'] != null) {
      facetGroups = <FacetGroups>[];
      json['facet_groups'].forEach((v) {
        facetGroups!.add(new FacetGroups.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['nhits'] = this.nhits;
    if (this.parameters != null) {
      data['parameters'] = this.parameters!.toJson();
    }
    if (this.records != null) {
      data['records'] = this.records!.map((v) => v.toJson()).toList();
    }
    if (this.facetGroups != null) {
      data['facet_groups'] = this.facetGroups!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Parameters {
  String? dataset;
  String? lang;
  int? rows;
  int? start;
  List<String>? sort;
  List<String>? facet;
  String? format;
  List<String>? geofilterDistance;
  String? timezone;

  Parameters(
      {this.dataset,
      this.lang,
      this.rows,
      this.start,
      this.sort,
      this.facet,
      this.format,
      this.geofilterDistance,
      this.timezone});

  Parameters.fromJson(Map<String, dynamic> json) {
    dataset = json['dataset'];
    lang = json['lang'];
    rows = json['rows'];
    start = json['start'];
    sort = json['sort'].cast<String>();
    facet = json['facet'].cast<String>();
    format = json['format'];
    geofilterDistance = json['geofilter.distance'].cast<String>();
    timezone = json['timezone'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['dataset'] = this.dataset;
    data['lang'] = this.lang;
    data['rows'] = this.rows;
    data['start'] = this.start;
    data['sort'] = this.sort;
    data['facet'] = this.facet;
    data['format'] = this.format;
    data['geofilter.distance'] = this.geofilterDistance;
    data['timezone'] = this.timezone;
    return data;
  }
}

class Records {
  String? datasetid;
  String? recordid;
  Fields? fields;
  Geometry? geometry;
  String? recordTimestamp;

  Records(
      {this.datasetid,
      this.recordid,
      this.fields,
      this.geometry,
      this.recordTimestamp});

  Records.fromJson(Map<String, dynamic> json) {
    datasetid = json['datasetid'];
    recordid = json['recordid'];
    fields =
        json['fields'] != null ? new Fields.fromJson(json['fields']) : null;
    geometry = json['geometry'] != null
        ? new Geometry.fromJson(json['geometry'])
        : null;
    recordTimestamp = json['record_timestamp'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['datasetid'] = this.datasetid;
    data['recordid'] = this.recordid;
    if (this.fields != null) {
      data['fields'] = this.fields!.toJson();
    }
    if (this.geometry != null) {
      data['geometry'] = this.geometry!.toJson();
    }
    data['record_timestamp'] = this.recordTimestamp;
    return data;
  }
}

class Fields {
  String? cctCodeCommune;
  int? prixContreVisiteMin;
  String? cctTel;
  String? catVehiculeId;
  int? prixContreVisiteMax;
  String? cctDenomination;
  List<double>? latitude;
  String? cctUrl;
  String? catEnergieId;
  String? cctSiret;
  String? cctAdresse;
  String? cctCodeDept;
  String? catEnergieLibelle;
  String? dateApplicationContreVisite;
  String? catVehiculeLibelle;
  int? prixVisite;
  String? dateApplicationVisite;
  String? dist;

  Fields(
      {this.cctCodeCommune,
      this.prixContreVisiteMin,
      this.cctTel,
      this.catVehiculeId,
      this.prixContreVisiteMax,
      this.cctDenomination,
      this.latitude,
      this.cctUrl,
      this.catEnergieId,
      this.cctSiret,
      this.cctAdresse,
      this.cctCodeDept,
      this.catEnergieLibelle,
      this.dateApplicationContreVisite,
      this.catVehiculeLibelle,
      this.prixVisite,
      this.dateApplicationVisite,
      this.dist});

  Fields.fromJson(Map<String, dynamic> json) {
    cctCodeCommune = json['cct_code_commune'];
    prixContreVisiteMin = json['prix_contre_visite_min'];
    cctTel = json['cct_tel'];
    catVehiculeId = json['cat_vehicule_id'];
    prixContreVisiteMax = json['prix_contre_visite_max'];
    cctDenomination = json['cct_denomination'];
    latitude = json['latitude'].cast<double>();
    cctUrl = json['cct_url'];
    catEnergieId = json['cat_energie_id'];
    cctSiret = json['cct_siret'];
    cctAdresse = json['cct_adresse'];
    cctCodeDept = json['cct_code_dept'];
    catEnergieLibelle = json['cat_energie_libelle'];
    dateApplicationContreVisite = json['date_application_contre_visite'];
    catVehiculeLibelle = json['cat_vehicule_libelle'];
    prixVisite = json['prix_visite'];
    dateApplicationVisite = json['date_application_visite'];
    dist = json['dist'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['cct_code_commune'] = this.cctCodeCommune;
    data['prix_contre_visite_min'] = this.prixContreVisiteMin;
    data['cct_tel'] = this.cctTel;
    data['cat_vehicule_id'] = this.catVehiculeId;
    data['prix_contre_visite_max'] = this.prixContreVisiteMax;
    data['cct_denomination'] = this.cctDenomination;
    data['latitude'] = this.latitude;
    data['cct_url'] = this.cctUrl;
    data['cat_energie_id'] = this.catEnergieId;
    data['cct_siret'] = this.cctSiret;
    data['cct_adresse'] = this.cctAdresse;
    data['cct_code_dept'] = this.cctCodeDept;
    data['cat_energie_libelle'] = this.catEnergieLibelle;
    data['date_application_contre_visite'] = this.dateApplicationContreVisite;
    data['cat_vehicule_libelle'] = this.catVehiculeLibelle;
    data['prix_visite'] = this.prixVisite;
    data['date_application_visite'] = this.dateApplicationVisite;
    data['dist'] = this.dist;
    return data;
  }
}

class Geometry {
  String? type;
  List<double>? coordinates;

  Geometry({this.type, this.coordinates});

  Geometry.fromJson(Map<String, dynamic> json) {
    type = json['type'];
    coordinates = json['coordinates'].cast<double>();
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['type'] = this.type;
    data['coordinates'] = this.coordinates;
    return data;
  }
}

class FacetGroups {
  String? name;
  List<Facets>? facets;

  FacetGroups({this.name, this.facets});

  FacetGroups.fromJson(Map<String, dynamic> json) {
    name = json['name'];
    if (json['facets'] != null) {
      facets = <Facets>[];
      json['facets'].forEach((v) {
        facets!.add(new Facets.fromJson(v));
      });
    }
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['name'] = this.name;
    if (this.facets != null) {
      data['facets'] = this.facets!.map((v) => v.toJson()).toList();
    }
    return data;
  }
}

class Facets {
  String? name;
  int? count;
  String? state;
  String? path;

  Facets({this.name, this.count, this.state, this.path});

  Facets.fromJson(Map<String, dynamic> json) {
    name = json['name'];
    count = json['count'];
    state = json['state'];
    path = json['path'];
  }

  Map<String, dynamic> toJson() {
    final Map<String, dynamic> data = new Map<String, dynamic>();
    data['name'] = this.name;
    data['count'] = this.count;
    data['state'] = this.state;
    data['path'] = this.path;
    return data;
  }
}