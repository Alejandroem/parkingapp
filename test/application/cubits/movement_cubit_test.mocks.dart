// Mocks generated by Mockito 5.4.2 from annotations
// in parking/test/application/cubits/movement_cubit_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:parking/domain/models/geocoded_location.dart' as _i8;
import 'package:parking/domain/models/lat_lng.dart' as _i2;
import 'package:parking/domain/models/live_location.dart' as _i7;
import 'package:parking/domain/models/user_activity.dart' as _i5;
import 'package:parking/domain/services/activity_service.dart' as _i3;
import 'package:parking/domain/services/location_service.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLatitudeLongitude_0 extends _i1.SmartFake
    implements _i2.LatitudeLongitude {
  _FakeLatitudeLongitude_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [ActivityService].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivityService extends _i1.Mock implements _i3.ActivityService {
  @override
  _i4.Future<bool> askForActivityPermission() => (super.noSuchMethod(
        Invocation.method(
          #askForActivityPermission,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Future<bool> checkActivityPermission() => (super.noSuchMethod(
        Invocation.method(
          #checkActivityPermission,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Stream<_i5.UserActivity?> getActivityStream() => (super.noSuchMethod(
        Invocation.method(
          #getActivityStream,
          [],
        ),
        returnValue: _i4.Stream<_i5.UserActivity?>.empty(),
        returnValueForMissingStub: _i4.Stream<_i5.UserActivity?>.empty(),
      ) as _i4.Stream<_i5.UserActivity?>);
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i6.LocationService {
  @override
  _i4.Future<_i2.LatitudeLongitude> getLocation() => (super.noSuchMethod(
        Invocation.method(
          #getLocation,
          [],
        ),
        returnValue:
            _i4.Future<_i2.LatitudeLongitude>.value(_FakeLatitudeLongitude_0(
          this,
          Invocation.method(
            #getLocation,
            [],
          ),
        )),
        returnValueForMissingStub:
            _i4.Future<_i2.LatitudeLongitude>.value(_FakeLatitudeLongitude_0(
          this,
          Invocation.method(
            #getLocation,
            [],
          ),
        )),
      ) as _i4.Future<_i2.LatitudeLongitude>);
  @override
  _i4.Future<bool> askForLocationPermission() => (super.noSuchMethod(
        Invocation.method(
          #askForLocationPermission,
          [],
        ),
        returnValue: _i4.Future<bool>.value(false),
        returnValueForMissingStub: _i4.Future<bool>.value(false),
      ) as _i4.Future<bool>);
  @override
  _i4.Stream<_i7.LiveLocation?> getLiveLocation() => (super.noSuchMethod(
        Invocation.method(
          #getLiveLocation,
          [],
        ),
        returnValue: _i4.Stream<_i7.LiveLocation?>.empty(),
        returnValueForMissingStub: _i4.Stream<_i7.LiveLocation?>.empty(),
      ) as _i4.Stream<_i7.LiveLocation?>);
  @override
  _i4.Future<_i8.GeocodedLocation?> getGeocodedLocation(
          _i2.LatitudeLongitude? location) =>
      (super.noSuchMethod(
        Invocation.method(
          #getGeocodedLocation,
          [location],
        ),
        returnValue: _i4.Future<_i8.GeocodedLocation?>.value(),
        returnValueForMissingStub: _i4.Future<_i8.GeocodedLocation?>.value(),
      ) as _i4.Future<_i8.GeocodedLocation?>);
}
